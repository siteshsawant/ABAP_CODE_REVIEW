*&---------------------------------------------------------------------*
*   Program Name / Enhancement Name : ZR_PM_KPIFOT                     *
*&---------------------------------------------------------------------*
*   TCode : ZPM_FOT                                                    *
*   Description : Follow On Tasks                                      *
*   CR Number :                                                        *
*   Package : ZPM                                                      *
*   Date of Creation : 25-08-2022                                      *
*   Transport Request :                                                *
*&---------------------------------------------------------------------*
*   Func Consultant : Naveen Kumar                                     *
*   Tech Consultant : Sitesh Sawant                                    *
*&---------------------------------------------------------------------*

REPORT ZR_PM_KPIFOT.

INCLUDE ZKPIFOT_TOP. " Variables & Selection Screen
DATA: LT_FINAL2 TYPE TABLE OF TY_FINAL WITH HEADER LINE.
INITIALIZATION.
  INCLUDE ZTITLES.
  PERFORM USER_DROP_DOWN_LIST_FORMN. " Month Dropdown
  PERFORM USER_DROP_DOWN_LIST_FORYR. " Year Dropdown
  PERFORM USER_DROP_DOWN_LIST_FORWK. " Week Dropdown

START-OF-SELECTION.
  PERFORM GET_WEEKS. " Get all weeks and days of weeks except sundays.
  PERFORM GET_DATA.  "
  PERFORM BUILD_FIELDCATALOG.
  PERFORM BUILD_LAYOUT.
  PERFORM DISPLAY_ALV_REPORT.



FORM USER_DROP_DOWN_LIST_FORMN.
  DATA: NAME  TYPE VRM_ID,
        LIST  TYPE VRM_VALUES,
        VALUE LIKE LINE OF LIST.
  DATA: T_MONTHS TYPE T247 OCCURS 0 WITH HEADER LINE.
  CLEAR LIST. REFRESH LIST.
  NAME = 'P_MONTH'.
  SELECT * INTO TABLE T_MONTHS
  FROM T247 WHERE SPRAS EQ 'EN'.
  SORT T_MONTHS ASCENDING BY MNR.
  LOOP AT T_MONTHS.
    CLEAR VALUE.
    VALUE-KEY = T_MONTHS-MNR.
    VALUE-TEXT = T_MONTHS-LTX.
    APPEND VALUE TO LIST.
    P_MONTH = '01'.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      ID     = NAME
      VALUES = LIST.
ENDFORM.

FORM USER_DROP_DOWN_LIST_FORYR.
  DATA: NAME  TYPE VRM_ID,
        LIST  TYPE VRM_VALUES,
        VALUE LIKE LINE OF LIST.
  CLEAR LIST. REFRESH LIST.
  NAME = 'P_YEAR'.
  DO 100 TIMES.
    CLEAR VALUE.
    VALUE-KEY = 2000 + SY-INDEX.
    APPEND VALUE TO LIST.
  ENDDO.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      ID     = NAME
      VALUES = LIST.
  P_YEAR = '2022'.
ENDFORM.

FORM USER_DROP_DOWN_LIST_FORWK.
  DATA: NAME  TYPE VRM_ID,
        LIST  TYPE VRM_VALUES,
        VALUE LIKE LINE OF LIST.
  CLEAR LIST. REFRESH LIST.
  NAME = 'P_WEEK'.
  DO 5 TIMES.
    CLEAR VALUE.
    VALUE-KEY = SY-INDEX.
    CONCATENATE 'Week' SPACE VALUE-KEY INTO VALUE-TEXT RESPECTING BLANKS.
    APPEND VALUE TO LIST.
  ENDDO.
  CLEAR VALUE.
  VALUE-KEY = '0'.
  VALUE-TEXT = 'ALL'.
  APPEND VALUE TO LIST.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      ID     = NAME
      VALUES = LIST.
  P_WEEK = '0'.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_WEEKS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_WEEKS .
  DATA: PAR_MONTH LIKE  T009B-BUMON,
        PAR_YEAR  LIKE  T009B-BDATJ,
        PAR_DAYS  LIKE  T009B-BUTAG,
        SDATE     LIKE SY-DATUM,
        LDATE     LIKE SY-DATUM,
        TEMPD     TYPE SY-DATUM.

  PAR_MONTH = P_MONTH.
  PAR_YEAR = P_YEAR.
  CALL FUNCTION 'NUMBER_OF_DAYS_PER_MONTH_GET'
    EXPORTING
      PAR_MONTH = PAR_MONTH
      PAR_YEAR  = PAR_YEAR
    IMPORTING
      PAR_DAYS  = PAR_DAYS.
  DD = PAR_DAYS.
  CONCATENATE PAR_YEAR PAR_MONTH '01' INTO DATE1.
  CALL FUNCTION 'DATE_GET_WEEK'
    EXPORTING
      DATE = DATE1
    IMPORTING
      WEEK = WEEK1.
  CONCATENATE PAR_YEAR PAR_MONTH PAR_DAYS INTO DATE2.
  CALL FUNCTION 'DATE_GET_WEEK'
    EXPORTING
      DATE = DATE2
    IMPORTING
      WEEK = WEEK2.

  IF WEEK1+0(4) LT P_YEAR.
    CONCATENATE P_YEAR '01' INTO WEEK1.
  ENDIF.
  SWEEK = WEEK1+4(2).
  EWEEK = WEEK2+4(2).

  LOOPS = EWEEK - SWEEK.
  LOOPS = LOOPS + 1.
  DO LOOPS TIMES.
    CALL FUNCTION 'WEEK_GET_FIRST_DAY'
      EXPORTING
        WEEK = WEEK1
      IMPORTING
        DATE = SDATE.
    TEMP_WEEK = WEEK1 + 1.
    CALL FUNCTION 'WEEK_GET_FIRST_DAY'
      EXPORTING
        WEEK = TEMP_WEEK
      IMPORTING
        DATE = LDATE.
    LDATE = LDATE - 1.
    DATA: TDATE TYPE SY-DATUM,
          DAY   TYPE DTRESR-WEEKDAY.
    TEMPD = '0'.
    IF SDATE LT DATE1.
      SDATE = DATE1.
      TDATE = SDATE.
      WHILE TDATE <= LDATE.
        CALL FUNCTION 'DATE_TO_DAY'
          EXPORTING
            DATE    = TDATE
          IMPORTING
            WEEKDAY = DAY.
        IF DAY = 'Sunday'.
          TEMPD = '1'.
        ENDIF.
        TDATE = TDATE + 1.
      ENDWHILE.
      CLEAR TDATE.
    ELSEIF LDATE >= DATE2.
      LDATE = DATE2.
      TDATE = SDATE.
      WHILE TDATE <= LDATE.
        CALL FUNCTION 'DATE_TO_DAY'
          EXPORTING
            DATE    = TDATE
          IMPORTING
            WEEKDAY = DAY.
        IF DAY = 'Sunday'.
          TEMPD = '1'.
        ENDIF.
        TDATE = TDATE + 1.
      ENDWHILE.
      CLEAR TDATE.
    ENDIF.

    LT_WEEK-SIGN = 'I'.
    LT_WEEK-OPTION = 'BT'.
    LT_WEEK-LOW = SDATE.
    LT_WEEK-HIGH = LDATE.
    LT_WEEK-WEEK = SY-INDEX.
    IF LDATE EQ SDATE.
      LT_WEEK-WCOUNT = 1 - TEMPD.
    ELSE.
      LT_WEEK-WCOUNT = LDATE - SDATE - TEMPD.
    ENDIF.
    APPEND LT_WEEK TO LT_WEEK.
    CLEAR TEMPD.
    WEEK1 = WEEK1 + 1.
  ENDDO.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_DATA .
  DATA: DATE1 TYPE SY-DATUM,
        DATE2 TYPE SY-DATUM.
  CONCATENATE P_YEAR '01' '01'  INTO DATE1.
  CONCATENATE P_YEAR '12' '01'  INTO DATE2.
  DATA: OP_COUNT1 TYPE INT4, OP_COUNT2 TYPE INT4, OP_COUNT3 TYPE INT4, WEEKNO TYPE CHAR1.
  LOOP AT LT_WEEK.
    WEEKNO = SY-TABIX.
    CLEAR: OP_COUNT1,OP_COUNT2, OP_COUNT3.
    REFRESH LT_AUFNRS1.
    SELECT * FROM VIAUFKS INTO CORRESPONDING FIELDS OF TABLE LT_VIAUFKS WHERE WERKS = P_PLANT AND AUTYP = '30' AND AUART = 'ZPMS' AND ERDAT BETWEEN DATE1 AND SY-DATUM.
    LOOP AT LT_VIAUFKS.
      SELECT OBJNR STAT INACT FROM JEST INTO CORRESPONDING FIELDS OF TABLE LT_JEST WHERE OBJNR EQ LT_VIAUFKS-OBJNR AND STAT NE 'I0076' AND INACT NE 'X'.
      LOOP AT LT_JEST.
        IF LT_JEST-STAT EQ 'E0011' OR LT_JEST-STAT EQ 'E0013' OR LT_JEST-STAT EQ'E0014'.
          SELECT TXT04 FROM TJ30T INTO CORRESPONDING FIELDS OF TABLE LT_TJ30T WHERE ESTAT EQ LT_JEST-STAT AND SPRAS EQ 'EN'.
          LOOP AT LT_TJ30T.
            IF LT_TJ30T-TXT04 EQ 'WCFW' OR LT_TJ30T-TXT04 EQ 'WCRP'.
              LT_AUFNRS1-AUFNR = LT_VIAUFKS-AUFNR.
              LT_AUFNRS1-GLTRP = LT_VIAUFKS-GLTRP.
              LT_AUFNRS1-AUART = LT_VIAUFKS-AUART.
              APPEND LT_AUFNRS1 TO  LT_AUFNRS1.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
    SORT LT_AUFNRS1 ASCENDING.
    DELETE ADJACENT DUPLICATES FROM LT_AUFNRS1.
    DATA: KEY   TYPE CDPOS-OBJECTID,
          DATE  TYPE SY-DATUM,
          KEY3  TYPE CDPOS-OBJECTID,
          DATE3 TYPE SY-DATUM.

    LOOP AT LT_AUFNRS1.
      SELECT AUFPL GLTRP FROM AFKO INTO CORRESPONDING FIELDS OF TABLE LT_AFKO WHERE AUFNR EQ LT_AUFNRS1-AUFNR.
      SELECT OBJNR RUECK FROM AFVC INTO CORRESPONDING FIELDS OF TABLE LT_AFVC FOR ALL ENTRIES IN LT_AFKO WHERE AUFPL EQ LT_AFKO-AUFPL.
      REFRESH LT_AFRU.
      LOOP AT LT_AFVC.
        SELECT SINGLE VORNR LTXA1 BUDAT FROM AFRU INTO CORRESPONDING FIELDS OF LT_AFRU WHERE RUECK = LT_AFVC-RUECK.
        APPEND LT_AFRU TO LT_AFRU.
      ENDLOOP.
      SELECT * FROM JCDS INTO CORRESPONDING FIELDS OF TABLE LT_JCDS WHERE OBJNR = LT_AUFNRS1-OBJNR AND STAT = 'I0002' AND INACT NE 'X'.
      SORT LT_JCDS DESCENDING BY UDATE UTIME.
      READ TABLE LT_JCDS INDEX 1.
      CLEAR KEY.
      CONCATENATE SY-MANDT LT_AUFNRS1-AUTYP LT_AUFNRS1-AUFNR INTO KEY.
      SELECT SINGLE * FROM CDPOS INTO CORRESPONDING FIELDS OF LT_CDPOS WHERE OBJECTID = KEY AND TABNAME = 'AFKO' AND FNAME = 'GLTRP'.
      IF LT_CDPOS IS NOT INITIAL.
        CONCATENATE   LT_JCDS-UDATE+6(2) '.' LT_JCDS-UDATE+4(2) '.'LT_JCDS-UDATE+0(4) INTO DATE.
        SELECT * FROM CDHDR INTO CORRESPONDING FIELDS OF TABLE LT_CDHDR WHERE CHANGENR = LT_CDPOS-CHANGENR AND UDATE <= DATE.
        SORT LT_CDHDR DESCENDING BY UDATE UTIME.
        READ TABLE LT_CDHDR INDEX 1.
      ELSE.
        SELECT SINGLE * FROM AFKO INTO CORRESPONDING FIELDS OF LT_AFKO2 WHERE AUFNR = LT_AUFNRS1-AUFNR.
      ENDIF.
      LOOP AT LT_AFRU.
        IF LT_AFKO2-AUFNR IS NOT INITIAL AND LT_AFRU-BUDAT LE LT_AFKO2-GLTRP AND LT_AFKO2-GLTRP BETWEEN LT_WEEK-LOW AND LT_WEEK-HIGH.
          CLEAR LT_WO.
          LT_WO-WEEKNO = WEEKNO.
          LT_WO-AUFNR  = LT_AUFNRS1-AUFNR.
          LT_WO-AUART  = LT_AUFNRS1-AUART.
          LT_WO-VORNR  = LT_AFRU-VORNR.
          LT_WO-LTXA1  = LT_AFRU-LTXA1.
          LT_WO-BUDAT  = LT_AFRU-BUDAT.
          LT_WO-GLTRP  = LT_AFKO2-GLTRP.
          LT_WO-BFD = LT_AFKO2-GLTRP.
          APPEND LT_WO TO LT_WO.
          OP_COUNT1 = OP_COUNT1 + 1.

        ELSEIF LT_CDHDR-CHANGENR IS NOT INITIAL AND LT_AFRU-BUDAT LE LT_CDHDR-UDATE AND LT_CDHDR-UDATE BETWEEN LT_WEEK-LOW AND LT_WEEK-HIGH.
          LT_WO-WEEKNO = WEEKNO.
          LT_WO-AUFNR  = LT_AUFNRS1-AUFNR.
          LT_WO-AUART  = LT_AUFNRS1-AUART.
          LT_WO-VORNR  = LT_AFRU-VORNR.
          LT_WO-LTXA1  = LT_AFRU-LTXA1.
          LT_WO-BUDAT  = LT_AFRU-BUDAT.
          LT_WO-GLTRP  = LT_CDHDR-UDATE.
          LT_WO-BFD = LT_AFKO2-GLTRP.
          APPEND LT_WO TO LT_WO.
          OP_COUNT1 = OP_COUNT1 + 1.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    LOOP AT LT_VIAUFKS.
      SELECT AUFPL FROM AFKO INTO CORRESPONDING FIELDS OF TABLE LT_AFKO WHERE AUFNR EQ LT_VIAUFKS-AUFNR.
      SELECT OBJNR FROM AFVC INTO CORRESPONDING FIELDS OF TABLE LT_AFVC3 FOR ALL ENTRIES IN LT_AFKO WHERE AUFPL EQ LT_AFKO-AUFPL.
      REFRESH LT_AFRU3.
      LOOP AT LT_AFVC3.
        SELECT SINGLE VORNR LTXA1 BUDAT FROM AFRU INTO CORRESPONDING FIELDS OF LT_AFRU3 WHERE RUECK = LT_AFVC3-RUECK.
        APPEND LT_AFRU3 TO LT_AFRU3.
      ENDLOOP.
      SELECT * FROM JCDS INTO CORRESPONDING FIELDS OF TABLE LT_JCDS3 WHERE OBJNR = LT_VIAUFKS-OBJNR AND STAT = 'I0002' AND INACT NE 'X'.
      SORT LT_JCDS3 DESCENDING BY UDATE UTIME.
      READ TABLE LT_JCDS3 INDEX 1.
      CLEAR KEY3.
      CONCATENATE SY-MANDT LT_VIAUFKS-AUTYP LT_VIAUFKS-AUFNR INTO KEY3.
      SELECT SINGLE * FROM CDPOS INTO CORRESPONDING FIELDS OF LT_CDPOS3 WHERE OBJECTID = KEY AND TABNAME = 'AFKO' AND FNAME = 'GLTRP'.
      IF LT_CDPOS3 IS NOT INITIAL.
        CONCATENATE   LT_JCDS3-UDATE+6(2) '.' LT_JCDS3-UDATE+4(2) '.'LT_JCDS3-UDATE+0(4) INTO DATE3.
        SELECT * FROM CDHDR INTO CORRESPONDING FIELDS OF TABLE LT_CDHDR3 WHERE CHANGENR = LT_CDPOS3-CHANGENR AND UDATE <= DATE3.
        SORT LT_CDHDR3 DESCENDING BY UDATE UTIME.
        READ TABLE LT_CDHDR3 INDEX 1.
      ELSE.
        SELECT SINGLE * FROM AFKO INTO CORRESPONDING FIELDS OF LT_AFKO23 WHERE AUFNR = LT_VIAUFKS-AUFNR.
      ENDIF.
      LOOP AT LT_AFRU3.
        IF LT_AFKO23-AUFNR IS NOT INITIAL AND LT_AFRU3-BUDAT LE LT_AFKO23-GLTRP AND LT_AFKO23-GLTRP BETWEEN LT_WEEK-LOW AND LT_WEEK-HIGH.
          LT_TOTALWO-WEEKNO = WEEKNO.
          LT_TOTALWO-AUFNR  = LT_VIAUFKS-AUFNR.
          LT_TOTALWO-AUART  = LT_VIAUFKS-AUART.
          LT_TOTALWO-VORNR  = LT_AFRU-VORNR.
          LT_TOTALWO-LTXA1  = LT_AFRU-LTXA1.
          LT_TOTALWO-BUDAT  = LT_AFRU3-BUDAT.
          LT_TOTALWO-GLTRP  = LT_AFKO23-GLTRP.
          LT_TOTALWO-BFD = LT_AFKO23-GLTRP.
          APPEND LT_TOTALWO TO LT_TOTALWO.
          OP_COUNT3 = OP_COUNT3 + 1.
        ELSEIF LT_CDHDR3-CHANGENR IS NOT INITIAL AND LT_AFRU3-BUDAT LE LT_AFKO23-GLTRP AND LT_CDHDR3-UDATE BETWEEN LT_WEEK-LOW AND LT_WEEK-HIGH.
          LT_TOTALWO-WEEKNO = WEEKNO.
          LT_TOTALWO-AUFNR  = LT_VIAUFKS-AUFNR.
          LT_TOTALWO-AUART  = LT_VIAUFKS-AUART.
          LT_TOTALWO-VORNR  = LT_AFRU3-VORNR.
          LT_TOTALWO-BUDAT  = LT_AFRU3-BUDAT.
          LT_TOTALWO-GLTRP  = LT_CDHDR3-UDATE.
          LT_TOTALWO-BFD = LT_AFKO23-GLTRP.
          APPEND LT_TOTALWO TO LT_TOTALWO.
          OP_COUNT3 = OP_COUNT3 + 1.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
    DATA: MONTH TYPE T247-LTX.
    SELECT SINGLE LTX INTO MONTH FROM T247 WHERE SPRAS EQ 'EN' AND MNR EQ P_MONTH.
    CONCATENATE 'Week' SPACE WEEKNO SPACE 'of' SPACE MONTH SPACE P_YEAR INTO LT_FINAL-WEEK RESPECTING BLANKS.
    LT_FINAL-COUNT = OP_COUNT1.
    LT_FINAL-TOTAL = OP_COUNT3.
    IF OP_COUNT1 = 0.
      LT_FINAL-FOT = 0.
    ELSE.
      LT_FINAL-FOT = ( OP_COUNT1 / OP_COUNT3 ) * 100.
    ENDIF.

    APPEND LT_FINAL TO LT_FINAL.
  ENDLOOP.
  IF P_WEEK NE 0.
    READ TABLE LT_FINAL INDEX P_WEEK.
    APPEND LT_FINAL TO LT_FINAL2.
  ELSE.
    LOOP AT LT_FINAL.
      APPEND LT_FINAL to LT_FINAL2.
    ENDLOOP.
  ENDIF.
ENDFORM.
FORM BUILD_FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'WEEK'.
  FIELDCATALOG-SELTEXT_L   = 'Week'.
  FIELDCATALOG-COL_POS     = 0.
  FIELDCATALOG-JUST        = 'C'.
  APPEND FIELDCATALOG TO FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'COUNT'.
  FIELDCATALOG-SELTEXT_L   = 'Tasks with WCFW/ WCRP'.
  FIELDCATALOG-COL_POS     = 1.
  FIELDCATALOG-JUST        = 'C'.
  FIELDCATALOG-HOTSPOT     = 'X'.
  APPEND FIELDCATALOG TO FIELDCATALOG.
  CLEAR  FIELDCATALOG.


  FIELDCATALOG-FIELDNAME   = 'TOTAL'.
  FIELDCATALOG-SELTEXT_L   = 'Total Tasks'.
  FIELDCATALOG-COL_POS     = 3.
  FIELDCATALOG-JUST        = 'C'.
  FIELDCATALOG-HOTSPOT     = 'X'.
  APPEND FIELDCATALOG TO FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG-FIELDNAME   = 'FOT'.
  FIELDCATALOG-SELTEXT_L   = 'Follow On Tasks'.
  FIELDCATALOG-COL_POS     = 4.
  FIELDCATALOG-JUST        = 'C'.
  FIELDCATALOG-EDIT_MASK       = '______%'.
  APPEND FIELDCATALOG TO FIELDCATALOG.
  CLEAR  FIELDCATALOG.

  FIELDCATALOG2-FIELDNAME   = 'WEEKNO'.
  FIELDCATALOG2-SELTEXT_L   = 'Week No'.
  FIELDCATALOG2-COL_POS     = 0.
  FIELDCATALOG2-JUST        = 'C'.
  APPEND FIELDCATALOG2 TO FIELDCATALOG2.
  CLEAR  FIELDCATALOG2.

  FIELDCATALOG2-FIELDNAME   = 'AUFNR'.
  FIELDCATALOG2-SELTEXT_L   = 'Order No'.
  FIELDCATALOG2-COL_POS     = 1.
  FIELDCATALOG2-JUST        = 'C'.
  FIELDCATALOG2-HOTSPOT      = 'X'.
  APPEND FIELDCATALOG2 TO FIELDCATALOG2.
  CLEAR  FIELDCATALOG2.

  FIELDCATALOG2-FIELDNAME   = 'AUART'.
  FIELDCATALOG2-SELTEXT_L   = 'Order Type'.
  FIELDCATALOG2-COL_POS     = 2.
  FIELDCATALOG2-JUST        = 'C'.
  APPEND FIELDCATALOG2 TO FIELDCATALOG2.
  CLEAR  FIELDCATALOG2.

  FIELDCATALOG2-FIELDNAME   = 'BUDAT'.
  FIELDCATALOG2-SELTEXT_L   = 'Posting Date'.
  FIELDCATALOG2-COL_POS     = 3.
  FIELDCATALOG2-JUST        = 'C'.
  APPEND FIELDCATALOG2 TO FIELDCATALOG2.
  CLEAR  FIELDCATALOG2.

  FIELDCATALOG2-FIELDNAME   = 'GLTRP'.
  FIELDCATALOG2-SELTEXT_L   = 'Basic Finish Date(Release)'.
  FIELDCATALOG2-COL_POS     = 4.
  FIELDCATALOG2-JUST        = 'C'.
  APPEND FIELDCATALOG2 TO FIELDCATALOG2.
  CLEAR  FIELDCATALOG2.

  FIELDCATALOG2-FIELDNAME   = 'BFD'.
  FIELDCATALOG2-SELTEXT_L   = 'Latest Basic Finish Date'.
  FIELDCATALOG2-COL_POS     = 5.
  FIELDCATALOG2-JUST        = 'C'.
  APPEND FIELDCATALOG2 TO FIELDCATALOG2.
  CLEAR  FIELDCATALOG2.

ENDFORM.                    " BUILD_FIELDCATALOG


*&---------------------------------------------------------------------*
*&      Form  BUILD_LAYOUT
*&---------------------------------------------------------------------*
*       Build layout for ALV grid report
*----------------------------------------------------------------------*
FORM BUILD_LAYOUT.
  GD_LAYOUT-NO_INPUT          = 'X'.
  GD_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  GD_LAYOUT-INFO_FIELDNAME =      'LINE_COLOR'.
  GD_LAYOUT2-NO_INPUT          = 'X'.
  GD_LAYOUT2-COLWIDTH_OPTIMIZE = 'X'.
  GD_LAYOUT2-INFO_FIELDNAME =      'LINE_COLOR'.
ENDFORM.                    " BUILD_LAYOUT

FORM DISPLAY_ALV_REPORT.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM      = SY-REPID
      I_CALLBACK_USER_COMMAND = 'USER_COMMAND'
      IS_LAYOUT               = GD_LAYOUT
      IT_FIELDCAT             = FIELDCATALOG[]
    TABLES
      T_OUTTAB                = LT_FINAL2
    EXCEPTIONS
      PROGRAM_ERROR           = 1
      OTHERS                  = 2.
  IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.
FORM USER_COMMAND USING R_UCOMM TYPE SY-UCOMM
    RS_SELFIELD TYPE SLIS_SELFIELD.
  DATA: LAST TYPE CHAR1.
  CASE R_UCOMM.
    WHEN '&IC1'.
      CLEAR LAST.
      IF RS_SELFIELD-SEL_TAB_FIELD EQ '1-COUNT'.
        DESCRIBE TABLE LT_FINAL2 LINES LAST.
        IF RS_SELFIELD-TABINDEX EQ LAST.
          REFRESH LT_SUBLIST.
          LOOP AT LT_WO.
            APPEND LT_WO TO LT_SUBLIST.
          ENDLOOP.
        ELSE.
          REFRESH LT_SUBLIST.
          LOOP AT LT_WO WHERE WEEKNO EQ RS_SELFIELD-TABINDEX.
            APPEND LT_WO TO LT_SUBLIST.
          ENDLOOP.
        ENDIF.
        SORT LT_SUBLIST ASCENDING.
        CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
          EXPORTING
            I_CALLBACK_PROGRAM      = SY-REPID
            I_CALLBACK_USER_COMMAND = 'USER_COMMAND'
            IS_LAYOUT               = GD_LAYOUT2
            IT_FIELDCAT             = FIELDCATALOG2[]
          TABLES
            T_OUTTAB                = LT_SUBLIST
          EXCEPTIONS
            PROGRAM_ERROR           = 1
            OTHERS                  = 2.
        IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
      ELSEIF RS_SELFIELD-SEL_TAB_FIELD EQ '1-TOTAL'.
        DESCRIBE TABLE LT_FINAL2 LINES LAST.
        IF RS_SELFIELD-TABINDEX EQ LAST.
          REFRESH LT_SUBLIST.
          LOOP AT LT_TOTALWO.
            APPEND LT_TOTALWO TO LT_SUBLIST.
          ENDLOOP.
        ELSE.
          REFRESH LT_SUBLIST.
          LOOP AT LT_TOTALWO WHERE WEEKNO EQ RS_SELFIELD-TABINDEX.
            APPEND LT_TOTALWO TO LT_SUBLIST.
          ENDLOOP.
        ENDIF.
        SORT LT_SUBLIST ASCENDING.
        CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
          EXPORTING
            I_CALLBACK_PROGRAM      = SY-REPID
            I_CALLBACK_USER_COMMAND = 'USER_COMMAND'
            IS_LAYOUT               = GD_LAYOUT2
            IT_FIELDCAT             = FIELDCATALOG2[]
          TABLES
            T_OUTTAB                = LT_SUBLIST
          EXCEPTIONS
            PROGRAM_ERROR           = 1
            OTHERS                  = 2.
        IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
        ENDIF.
      ELSEIF RS_SELFIELD-SEL_TAB_FIELD EQ '1-AUFNR'.
        DATA: DT_AUFNR LIKE LT_SUBLIST.
        READ TABLE LT_SUBLIST INDEX RS_SELFIELD-TABINDEX INTO DT_AUFNR.
        SET PARAMETER ID 'ANR' FIELD DT_AUFNR-AUFNR.
        CALL TRANSACTION 'IW33' AND SKIP FIRST SCREEN .
        CLEAR DT_AUFNR.
      ENDIF.


  ENDCASE.

ENDFORM.
